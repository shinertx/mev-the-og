diff --git a//dev/null b/src/transaction_manager.py
index 0000000..655a361 100644
--- a//dev/null
+++ b/src/transaction_manager.py
@@ -0,0 +1,108 @@
+import asyncio
+from decimal import Decimal
+from typing import Optional
+from web3 import Web3
+from solana.rpc.async_api import AsyncClient as SolanaClient
+
+from .signer_service import SignerService
+from .core.config_manager import AppConfig
+from eth_abi import decode_abi
+from eth_utils import event_abi_to_log_topic
+
+
+class TransactionManager:
+    def __init__(self, evm_web3: Web3, sol_client: Optional[SolanaClient], signer: SignerService, config: AppConfig):
+        self.evm_web3 = evm_web3
+        self.sol_client = sol_client
+        self.signer = signer
+        self.config = config
+
+    def _parse_amount_out(self, receipt, token_out: str, recipient: str) -> Optional[int]:
+        transfer_sig = event_abi_to_log_topic({
+            "name": "Transfer",
+            "type": "event",
+            "inputs": [
+                {"name": "from", "type": "address", "indexed": True},
+                {"name": "to", "type": "address", "indexed": True},
+                {"name": "value", "type": "uint256", "indexed": False},
+            ],
+        })
+        for log in receipt.logs:
+            if log.address.lower() == token_out.lower() and log.topics[0] == transfer_sig:
+                to = "0x" + log.topics[2].hex()[26:]
+                if to.lower() == recipient.lower():
+                    amount = int(log.data, 16)
+                    return amount
+        return None
+
+    async def get_evm_token_price(self, router_address: str, router_abi: list,
+                                  token_in_address: str, token_out_address: str,
+                                  amount_in_wei: int) -> Optional[Decimal]:
+        def _call():
+            router = self.evm_web3.eth.contract(address=router_address, abi=router_abi)
+            return router.functions.getAmountsOut(amount_in_wei, [token_in_address, token_out_address]).call()
+
+        try:
+            out = await asyncio.to_thread(_call)
+            amount_out = Decimal(out[-1])
+            return amount_out / Decimal(amount_in_wei)
+        except Exception:
+            return None
+
+    async def execute_evm_swap(
+        self,
+        router_address: str,
+        router_abi: list,
+        token_in_address: str,
+        token_out_address: str,
+        amount_in_wei: int,
+        amount_out_min_wei: int,
+        recipient_address: str,
+        gas_priority_gwei: Optional[str] = "fast",
+    ) -> dict:
+        router = self.evm_web3.eth.contract(address=router_address, abi=router_abi)
+        tx_func = router.functions.swapExactTokensForTokens
+        path = [token_in_address, token_out_address]
+        tx = tx_func(amount_in_wei, amount_out_min_wei, path, recipient_address)
+        tx_dict = tx.build_transaction({
+            "from": self.signer.get_eth_address(),
+            "nonce": self.evm_web3.eth.get_transaction_count(self.signer.get_eth_address(), "pending"),
+        })
+        try:
+            gas_estimate = self.evm_web3.eth.estimate_gas(tx_dict)
+        except Exception as e:
+            return {"success": False, "tx_hash": None, "receipt": None, "gas_used": None, "error": f"gas estimation failed: {e}"}
+
+        try:
+            base_fee = self.evm_web3.eth.get_block("latest").get("baseFeePerGas")
+            priority_fee = self.evm_web3.eth.max_priority_fee
+            max_fee = int(base_fee + priority_fee * 2)
+            tx_dict.update({
+                "gas": gas_estimate,
+                "maxFeePerGas": max_fee,
+                "maxPriorityFeePerGas": priority_fee,
+            })
+        except Exception:
+            gas_price = self.evm_web3.eth.gas_price
+            tx_dict.update({"gas": gas_estimate, "gasPrice": gas_price})
+        try:
+            signed = self.signer.sign_eth_tx(tx_dict)
+            tx_hash = self.evm_web3.eth.send_raw_transaction(signed)
+            receipt = self.evm_web3.eth.wait_for_transaction_receipt(tx_hash, timeout=180)
+            success = receipt.status == 1
+            gas_used = receipt.gasUsed if success else None
+            gas_price = getattr(receipt, "effectiveGasPrice", tx_dict.get("gasPrice"))
+            amount_out = None
+            if success:
+                amount_out = self._parse_amount_out(receipt, token_out_address, recipient_address)
+            return {
+                "success": success,
+                "tx_hash": tx_hash.hex(),
+                "receipt": dict(receipt) if success else None,
+                "gas_used": gas_used,
+                "effective_gas_price": gas_price,
+                "actual_amount_out_wei": amount_out,
+                "error": None if success else "reverted",
+            }
+        except Exception as e:
+            return {"success": False, "tx_hash": None, "receipt": None, "gas_used": None, "error": str(e)}
